{"ast":null,"code":"var _jsxFileName = \"/home/omsf/Documentos/2.ITA/1. CES-28/3. Pratica/nutriplus/nutriplus_front/src/containers/Patients/Register/Register.js\";\nimport React, { Component } from \"react\";\nimport { Button, Form, Grid, Header, Segment } from \"semantic-ui-react\";\n\nclass Register extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: \"\",\n      dob: \"\",\n      restrictions: \"\",\n      likedFoods: \"\",\n      message: \"\"\n    };\n\n    this.register = async () => {\n      const day = +this.state.dob.slice(0, 2);\n      const month = +this.state.dob.slice(3, 5);\n      const year = +this.state.dob.slice(6);\n\n      if (day === 0 || month === 0 || month > 12) {\n        this.setState({\n          message: \"Data inválida\"\n        });\n        return;\n      } else if (month < 8 && month % 2 === 1 || month >= 8 && month % 2 === 0) {\n        if (day > 31) {\n          this.setState({\n            message: \"Data inválida\"\n          });\n          return;\n        }\n      } else if (month === 2) {\n        if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) {\n          if (day > 29) {\n            this.setState({\n              message: \"Data inválida\"\n            });\n            return;\n          }\n        } else {\n          if (day > 28) {\n            this.setState({\n              message: \"Data inválida\"\n            });\n            return;\n          }\n        }\n      } else if (day > 30) {\n        this.setState({\n          message: \"Data inválida\"\n        });\n        return;\n      }\n\n      if (this.state.name.length === 0) {\n        this.setState({\n          message: \"Não há nome!\"\n        });\n        return;\n      }\n\n      console.log(JSON.stringify({\n        patient: this.state.name,\n        date_of_birth: this.state.dob,\n        food_choices: \"\"\n      }));\n      const res = await fetch(\"http://localhost:8080/patients/add-new/\", {\n        method: \"post\",\n        body: JSON.stringify({\n          patient: this.state.name,\n          date_of_birth: this.state.dob,\n          food_choices: this.state.likedFoods,\n          food_restrictions: this.state.restrictions\n        }),\n        headers: new Headers({\n          Authorization: \"Port \" + localStorage.getItem(\"stored_token\"),\n          \"Content-Type\": \"application/json\"\n        })\n      });\n      console.log(res);\n      const answ = await res;\n      const info = await answ.json();\n\n      if (answ.status === 400) {\n        this.setState({\n          message: \"Houve um erro no cadastro.\"\n        });\n        console.log(info);\n      } else if (answ.status === 200) {\n        this.setState({\n          message: \"Cadastro realizado com sucesso!\",\n          name: \"\",\n          dob: \"\",\n          restrictions: \"\",\n          likedFoods: \"\"\n        });\n        console.log(info);\n      } else if (answ.status === 401) {\n        this.setState({\n          message: \"A sua sessão expirou! Por favor dê logout e login de novo.\"\n        }); //   const res2 = await fetch(\"http://localhost:8080/user/token/refresh/\", {\n        //     method: \"post\",\n        //     body: JSON.stringify({\n        //       refresh: localStorage.getItem(\"stored_refresh\")\n        //     }),\n        //     headers: new Headers({\n        //       \"Content-Type\": \"application/json\"\n        //     })\n        //   });\n        //   const info2 = await res2.json();\n        //   console.log(info2);\n        //   localStorage.setItem(\"stored_token\", info2.access);\n        //   this.setState({ message: \"Sessão restaurada!\" });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: \"10vh\"\n      },\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h2\",\n      color: \"teal\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Insira as informa\\xE7\\xF5es do paciente abaixo\"), React.createElement(Form, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      stacked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      icon: \"id card outline\",\n      iconPosition: \"left\",\n      placeholder: \"Nome do paciente\",\n      onChange: event => {\n        this.setState({\n          name: event.target.value,\n          message: \"\"\n        });\n      },\n      value: this.state.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      icon: \"calendar\",\n      iconPosition: \"left\",\n      placeholder: \"DD/MM/YYYY\",\n      value: this.state.dob // TODO: make this update function foolproof\n      ,\n      onChange: event => {\n        const inputDob = event.target.value;\n        const actualIndex = this.state.dob.length;\n\n        if (inputDob.length > actualIndex) {\n          const lastChar = inputDob[actualIndex];\n\n          if (lastChar < \"0\" || lastChar > \"9\") {\n            return;\n          }\n\n          if (actualIndex === 2 || actualIndex === 5) {\n            // First month digit or year digit was just filled\n            this.setState({\n              dob: inputDob.slice(0, -1) + \"/\" + inputDob.slice(-1)\n            });\n            return;\n          }\n\n          if (actualIndex === 10) {\n            // Date should be finished\n            return;\n          }\n        } // If I didn't return up until now, I should just set state to the input\n\n\n        this.setState({\n          dob: inputDob,\n          message: \"\"\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      icon: \"food\",\n      iconPosition: \"left\",\n      placeholder: \"Prefer\\xEAncias alimentares\",\n      onChange: event => {\n        this.setState({\n          likedFoods: event.target.value,\n          message: \"\"\n        });\n      },\n      value: this.state.likedFoods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      icon: \"ban\",\n      iconPosition: \"left\",\n      placeholder: \"Restri\\xE7\\xF5es alimentares (opcional)\",\n      onChange: event => {\n        this.setState({\n          restrictions: event.target.value,\n          message: \"\"\n        });\n      },\n      value: this.state.restrictions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"teal\",\n      fluid: true,\n      size: \"large\",\n      onClick: this.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Registrar paciente\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, this.state.message)))));\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["/home/omsf/Documentos/2.ITA/1. CES-28/3. Pratica/nutriplus/nutriplus_front/src/containers/Patients/Register/Register.js"],"names":["React","Component","Button","Form","Grid","Header","Segment","Register","state","name","dob","restrictions","likedFoods","message","register","day","slice","month","year","setState","length","console","log","JSON","stringify","patient","date_of_birth","food_choices","res","fetch","method","body","food_restrictions","headers","Headers","Authorization","localStorage","getItem","answ","info","json","status","render","height","maxWidth","event","target","value","inputDob","actualIndex","lastChar"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Form, Grid, Header, Segment } from \"semantic-ui-react\";\n\nclass Register extends Component {\n  state = { name: \"\", dob: \"\", restrictions: \"\", likedFoods: \"\", message: \"\" };\n\n  register = async () => {\n    const day = +this.state.dob.slice(0, 2);\n    const month = +this.state.dob.slice(3, 5);\n    const year = +this.state.dob.slice(6);\n    if (day === 0 || month === 0 || month > 12) {\n      this.setState({ message: \"Data inválida\" });\n      return;\n    } else if (\n      (month < 8 && month % 2 === 1) ||\n      (month >= 8 && month % 2 === 0)\n    ) {\n      if (day > 31) {\n        this.setState({ message: \"Data inválida\" });\n        return;\n      }\n    } else if (month === 2) {\n      if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {\n        if (day > 29) {\n          this.setState({ message: \"Data inválida\" });\n          return;\n        }\n      } else {\n        if (day > 28) {\n          this.setState({ message: \"Data inválida\" });\n          return;\n        }\n      }\n    } else if (day > 30) {\n      this.setState({ message: \"Data inválida\" });\n      return;\n    }\n    if (this.state.name.length === 0) {\n      this.setState({ message: \"Não há nome!\" });\n      return;\n    }\n    console.log(\n      JSON.stringify({\n        patient: this.state.name,\n        date_of_birth: this.state.dob,\n        food_choices: \"\"\n      })\n    );\n    const res = await fetch(\"http://localhost:8080/patients/add-new/\", {\n      method: \"post\",\n      body: JSON.stringify({\n        patient: this.state.name,\n        date_of_birth: this.state.dob,\n        food_choices: this.state.likedFoods,\n        food_restrictions: this.state.restrictions\n      }),\n      headers: new Headers({\n        Authorization: \"Port \" + localStorage.getItem(\"stored_token\"),\n        \"Content-Type\": \"application/json\"\n      })\n    });\n    console.log(res);\n    const answ = await res;\n    const info = await answ.json();\n    if (answ.status === 400) {\n      this.setState({ message: \"Houve um erro no cadastro.\" });\n      console.log(info);\n    } else if (answ.status === 200) {\n      this.setState({\n        message: \"Cadastro realizado com sucesso!\",\n        name: \"\",\n        dob: \"\",\n        restrictions: \"\",\n        likedFoods: \"\"\n      });\n      console.log(info);\n    } else if (answ.status === 401) {\n      this.setState({\n        message: \"A sua sessão expirou! Por favor dê logout e login de novo.\"\n      });\n      //   const res2 = await fetch(\"http://localhost:8080/user/token/refresh/\", {\n      //     method: \"post\",\n      //     body: JSON.stringify({\n      //       refresh: localStorage.getItem(\"stored_refresh\")\n      //     }),\n      //     headers: new Headers({\n      //       \"Content-Type\": \"application/json\"\n      //     })\n      //   });\n      //   const info2 = await res2.json();\n      //   console.log(info2);\n      //   localStorage.setItem(\"stored_token\", info2.access);\n      //   this.setState({ message: \"Sessão restaurada!\" });\n    }\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"10vh\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\n            Insira as informações do paciente abaixo\n          </Header>\n          <Form size=\"large\">\n            <Segment stacked>\n              <Form.Input\n                icon=\"id card outline\"\n                iconPosition=\"left\"\n                placeholder=\"Nome do paciente\"\n                onChange={event => {\n                  this.setState({ name: event.target.value, message: \"\" });\n                }}\n                value={this.state.name}\n              />\n              <Form.Input\n                icon=\"calendar\"\n                iconPosition=\"left\"\n                placeholder=\"DD/MM/YYYY\"\n                value={this.state.dob}\n                // TODO: make this update function foolproof\n                onChange={event => {\n                  const inputDob = event.target.value;\n                  const actualIndex = this.state.dob.length;\n                  if (inputDob.length > actualIndex) {\n                    const lastChar = inputDob[actualIndex];\n                    if (lastChar < \"0\" || lastChar > \"9\") {\n                      return;\n                    }\n                    if (actualIndex === 2 || actualIndex === 5) {\n                      // First month digit or year digit was just filled\n                      this.setState({\n                        dob: inputDob.slice(0, -1) + \"/\" + inputDob.slice(-1)\n                      });\n                      return;\n                    }\n                    if (actualIndex === 10) {\n                      // Date should be finished\n                      return;\n                    }\n                  }\n                  // If I didn't return up until now, I should just set state to the input\n                  this.setState({ dob: inputDob, message: \"\" });\n                }}\n              />\n              <Form.Input\n                icon=\"food\"\n                iconPosition=\"left\"\n                placeholder=\"Preferências alimentares\"\n                onChange={event => {\n                  this.setState({\n                    likedFoods: event.target.value,\n                    message: \"\"\n                  });\n                }}\n                value={this.state.likedFoods}\n              />\n              <Form.Input\n                icon=\"ban\"\n                iconPosition=\"left\"\n                placeholder=\"Restrições alimentares (opcional)\"\n                onChange={event => {\n                  this.setState({\n                    restrictions: event.target.value,\n                    message: \"\"\n                  });\n                }}\n                value={this.state.restrictions}\n              />\n              <Button color=\"teal\" fluid size=\"large\" onClick={this.register}>\n                Registrar paciente\n              </Button>\n              <p>{this.state.message}</p>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}